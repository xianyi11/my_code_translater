$ $是注释
$空格是间隔
$将{} [] 全部转成对应文法 将单引号去除
$将文法扩展
<S> ::=<Program>
<Program> ::= <声明串>
$修改声明串的定义 <声明串> ::=<声明>{<声明>}
<声明串> ::=<声明>|<声明> <声明串>
<声明> ::=int  ID  <声明类型> | void  ID  <函数声明>|float  ID  <声明类型>
<声明类型>::=<变量声明> | <函数声明>|<数组声明>
<变量声明> ::=  ;
<函数声明> ::= ( <形参> ) <语句块> 
<形参>::= <参数列表> | void
$修改参数列表的定义 <参数列表>  ::= <参数> {, <参数>}
<参数列表>  ::= <参数> <逗号和参数>
<逗号和参数> ::= , <参数> <逗号和参数>|空
<参数> ::= int  ID|float  ID 
<语句块> ::= { <内部声明>  <语句串> }
$修改内部声明定义 <内部声明> ::= 空 | <内部变量声明>{<内部变量声明>;}
<内部声明> ::= 空 | <内部变量声明> ; <内部声明>
<内部变量声明>::=int  ID|float  ID| int  ID <数组声明>|float  ID <数组声明>
$<语句串> ::= <语句>{  <语句> }
<语句串> ::= <语句>|<语句> <语句串>
<语句> ::= <if语句> |<while语句> | <return语句> | <赋值语句>
<赋值语句> ::=  ID = <表达式> ; 
<赋值语句> ::=  <下标数组> = <表达式> ; 
<下标数组> ::= ID [ <表达式> ] <表达式循环>
<表达式循环> ::=空|[ <表达式> ] <表达式循环>
<数组声明> ::= <中括号和数字>
<中括号和数字> ::= [ num ]| [ num ] <中括号和数字>
$<return语句> ::= return  [ <表达式> ]
<return语句> ::= return <表达式> ;|return ;
<while语句> ::= while ( <表达式> )  <语句块>
$<if语句> ::= if  ( <表达式> )   <语句块>  [  else  <语句块> ]
<if语句> ::= if  ( <表达式> )   <语句块>  |if  ( <表达式> )   <语句块> else  <语句块>
$<表达式>::=<加法表达式>{<relop> <加法表达式>}
<表达式>::=<加法表达式> <relop和加法表达式>
<relop和加法表达式>::=空|<relop> <加法表达式> <relop和加法表达式>
<relop>::=<|<=|>|>=|==|!=
$<加法表达式> ::= <项> {+ <项> | - <项>}
<加法表达式> ::= <项> <加减项>
<加减项> ::=+ <项> <加减项>|- <项> <加减项>|空
$<项> ::= <因子> {* <因子> | /<因子>}
<项> ::= <因子> <乘除因子>
<乘除因子>::=* <因子> <乘除因子>|/ <因子> <乘除因子>|空
<因子> ::=num |  ( <表达式> )  |ID  <FTYPE>
<FTYPE> ::= <call> | 空
<call> ::= ( <实参列表> ) 
<实参> ::=<实参列表>|空
$<实参列表> ::=<表达式>{,<表达式>}
<实参列表> ::=<表达式> <逗号和表达式>
<逗号和表达式>::=, <表达式> <逗号和表达式>|空
$ID::=字母(字母|数字)*
$ID::=字母 <字母和数字>
$<字母和数字>::=字母 <字母和数字>|数字 <字母和数字>|空
